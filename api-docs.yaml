openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /usernotes:
    get:
      tags:
      - usernote-controller
      operationId: getAllUsernotes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - usernote-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usernote"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/register:
    post:
      tags:
      - user-controller
      summary: 회원 가입 API
      description: 회원 가입에 성공하면 이메일 인증(2fa)을 거칩니다.
      operationId: registerUser
      requestBody:
        description: 사용자 회원 정보
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: 2fa로 넘어갑니다. 추후 201 코드로 바뀔듯요
          content:
            application/json:
              schema:
                type: string
              example: 회원가입에 성공하셨습니다. 이메일 인증을 위하여 이메일함을 확인해주세요.
        "400":
          description: 잘못된 요청.
          content:
            application/json:
              schema:
                type: string
              example: 이미 존재하는 이메일입니다.
  /auth/logout:
    post:
      tags:
      - user-controller
      summary: 로그아웃 API
      description: 이미 로그아웃되었으므로 아무것도 반환하지 않습니다.
      operationId: logout
      requestBody:
        description: 사용자 로그아웃 정보
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/login:
    post:
      tags:
      - user-controller
      summary: 로그인 API
      description: 2차인증이 필요하다면 2차인증 수속을 다시 밟고 이미 되었다면 JWT 토큰을 반환합니다.
      operationId: login
      requestBody:
        description: 사용자 로그인 정보
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "500":
          description: 서버 내 오류
          content:
            applicatoin/json:
              example: 다시 접속해주세요.
        "200":
          description: 로그인 성공 또는 2FA 필요
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: "#/components/schemas/TwofaRequiredResponse"
                - $ref: "#/components/schemas/AuthResponse"
  /auth/check-email:
    post:
      tags:
      - user-controller
      summary: 우선 이메일 확인 API
      description: 이메일이 User DB에 있는지 확인합니다.
      operationId: checkEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailCheckRequest"
        required: true
      responses:
        "200":
          description: 이메일이 존재
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailCheckResponse"
              example: '이메일이 확인되었습니다. 비밀번호를 입력해주세요. '
        "404":
          description: 이메일 없음 ㅠㅠ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailCheckResponse"
              example: 이메일이 존재하지 않아 회원가입으로 이동합니다.
  /usernote/{id}:
    get:
      tags:
      - usernote-controller
      operationId: getUsernoteById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - usernote-controller
      operationId: deleteUsernote
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    patch:
      tags:
      - usernote-controller
      operationId: updateUsernote
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usernote"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/2fa:
    get:
      tags:
      - user-controller
      summary: 이메일 인증 API
      description: 해당되는 이메일로 링크가 전달됩니다.
      operationId: confirmEmail
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          description: email
          example: foo@sookmyung.ac.kr
        is2fa:
          type: boolean
          description: Is_2fa
          example: true
        nickname:
          type: string
        password:
          type: string
          description: password
          example: jamone122@3
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - USER
            - ADMIN
      description: 회원
    Usernote:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
    LogoutRequestDto:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: email
          example: foo@sookmyung.ac.kr
      description: 로그아웃 요청 DTO
    TwofaRequiredResponse:
      type: object
      properties:
        msg:
          type: string
      description: 2FA 필요 응답
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT 토큰
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      description: 인증 응답
    EmailCheckRequest:
      type: object
      properties:
        email:
          type: string
          description: email
      description: 이메일 확인 요
    EmailCheckResponse:
      type: object
      properties:
        exists:
          type: boolean
          description: 이메일 존재 여부
        message:
          type: string
          description: 응답 메시지
      description: 이메일 확인 응답
